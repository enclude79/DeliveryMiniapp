// –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã API –¥–ª—è DeliveryVLG
const http = require('http');

console.log('üß™ –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const port = process.env.NODE_ENV === 'development' ? 3001 : 3000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞
function makeRequest(path) {
    return new Promise((resolve, reject) => {
        const req = http.request({
            hostname: '127.0.0.1',
            port: port,
            path: path,
            timeout: 5000
        }, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                resolve({ statusCode: res.statusCode, data: data });
            });
        });

        req.on('error', (err) => {
            reject(err);
        });

        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        req.end();
    });
}

// –¢–µ—Å—Ç—ã
async function runTests() {
    let passed = 0;
    let failed = 0;

    const tests = [
        {
            name: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞',
            path: '/',
            expectedStatus: 200
        },
        {
            name: '–ê–¥–º–∏–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞',
            path: '/admin',
            expectedStatus: 200
        },
        {
            name: 'API —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω',
            path: '/api/status',
            expectedStatus: 200
        },
        {
            name: 'API –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω',
            path: '/api/orders',
            expectedStatus: 200
        },
        {
            name: '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 404',
            path: '/nonexistent',
            expectedStatus: 404
        }
    ];

    for (const test of tests) {
        try {
            const result = await makeRequest(test.path);
            
            if (result.statusCode === test.expectedStatus) {
                console.log(`‚úÖ ${test.name}`);
                passed++;
            } else {
                console.log(`‚ùå ${test.name} (–æ–∂–∏–¥–∞–ª—Å—è ${test.expectedStatus}, –ø–æ–ª—É—á–µ–Ω ${result.statusCode})`);
                failed++;
            }
        } catch (error) {
            console.log(`‚ùå ${test.name} (–æ—à–∏–±–∫–∞: ${error.message})`);
            failed++;
        }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
    console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);

    if (failed > 0) {
        console.log(`\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã!`);
        process.exit(1);
    } else {
        console.log(`\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!`);
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
}); 