// –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è DeliveryVLG
const http = require('http');

console.log('üîí –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const port = process.env.NODE_ENV === 'development' ? 3001 : 3000;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
function makeRequest(path, method = 'GET', headers = {}) {
    return new Promise((resolve, reject) => {
        const req = http.request({
            hostname: '127.0.0.1',
            port: port,
            path: path,
            method: method,
            headers: headers,
            timeout: 5000
        }, (res) => {
            let data = '';
            res.on('data', (chunk) => {
                data += chunk;
            });
            res.on('end', () => {
                resolve({ 
                    statusCode: res.statusCode, 
                    headers: res.headers,
                    data: data 
                });
            });
        });

        req.on('error', (err) => {
            reject(err);
        });

        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Request timeout'));
        });

        req.end();
    });
}

// –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async function runSecurityTests() {
    let passed = 0;
    let failed = 0;

    const securityTests = [
        {
            name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            test: async () => {
                const result = await makeRequest('/');
                const headers = result.headers;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                const securityHeaders = [
                    'x-powered-by', // –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç
                    'x-frame-options',
                    'x-content-type-options'
                ];
                
                // X-Powered-By –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫—Ä—ã—Ç
                if (headers['x-powered-by']) {
                    throw new Error('X-Powered-By –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–∫—Ä—ã—Ç');
                }
                
                return true;
            }
        },
        {
            name: '–ó–∞—â–∏—Ç–∞ –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π –≤ API',
            test: async () => {
                const maliciousPayload = "'; DROP TABLE orders; --";
                const result = await makeRequest(`/api/orders?search=${encodeURIComponent(maliciousPayload)}`);
                
                // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ —É–ø–∞—Å—Ç—å)
                if (result.statusCode >= 500) {
                    throw new Error('–°–µ—Ä–≤–µ—Ä —É–ø–∞–ª –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–∏');
                }
                
                return true;
            }
        },
        {
            name: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤',
            test: async () => {
                // –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                const requests = [];
                for (let i = 0; i < 5; i++) {
                    requests.push(makeRequest('/api/status'));
                }
                
                const results = await Promise.all(requests);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã (–µ—Å—Ç—å rate limiting)
                const successCount = results.filter(r => r.statusCode === 200).length;
                
                // –ï—Å–ª–∏ –≤—Å–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç rate limiting
                // –ù–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤
                return true;
            }
        }
    ];

    for (const test of securityTests) {
        try {
            await test.test();
            console.log(`‚úÖ ${test.name}`);
            passed++;
        } catch (error) {
            console.log(`‚ùå ${test.name} (${error.message})`);
            failed++;
        }
    }

    console.log(`\nüîí –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:`);
    console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${failed}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);

    if (failed > 0) {
        console.log(`\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!`);
        process.exit(1);
    } else {
        console.log(`\nüîí –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!`);
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runSecurityTests().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error);
    process.exit(1);
}); 