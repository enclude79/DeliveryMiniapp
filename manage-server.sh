#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º Delivery App
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./manage-server.sh [start|stop|restart|status|logs]

APP_DIR="/home/enclude/delivery-app"
PROCESS_NAME="node server.js"
LOG_FILE="$APP_DIR/server.log"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        "INFO")
            echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
            ;;
        *)
            echo -e "$message"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
check_status() {
    local pid=$(pgrep -f "$PROCESS_NAME")
    if [[ -n "$pid" ]]; then
        return 0
    else
        return 1
    fi
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
start_server() {
    print_status "INFO" "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if check_status; then
        print_status "WARNING" "–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $(pgrep -f "$PROCESS_NAME"))"
        return 0
    fi
    
    cd "$APP_DIR" || {
        print_status "ERROR" "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $APP_DIR"
        return 1
    }
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    nohup node server.js > server.log 2>&1 &
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    if check_status; then
        print_status "OK" "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: $(pgrep -f "$PROCESS_NAME"))"
        return 0
    else
        print_status "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
        return 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
stop_server() {
    print_status "INFO" "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if ! check_status; then
        print_status "WARNING" "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    local pid=$(pgrep -f "$PROCESS_NAME")
    print_status "INFO" "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É $pid..."
    
    # –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    kill -TERM "$pid" 2>/dev/null
    
    # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    local count=0
    while check_status && [[ $count -lt 10 ]]; do
        sleep 1
        count=$((count + 1))
    done
    
    if check_status; then
        print_status "WARNING" "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        kill -KILL "$pid" 2>/dev/null
        sleep 2
    fi
    
    if ! check_status; then
        print_status "OK" "–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    else
        print_status "ERROR" "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
        return 1
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
restart_server() {
    print_status "INFO" "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞..."
    stop_server
    sleep 2
    start_server
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    echo "============================================"
    echo "  –°–¢–ê–¢–£–° –°–ï–†–í–ï–†–ê DELIVERY APP"
    echo "  $(date '+%Y-%m-%d %H:%M:%S')"
    echo "============================================"
    
    if check_status; then
        local pid=$(pgrep -f "$PROCESS_NAME")
        print_status "OK" "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        local memory=$(ps -p "$pid" -o rss= | tr -d ' ')
        local memory_mb=$((memory / 1024))
        local cpu=$(ps -p "$pid" -o %cpu= | tr -d ' ')
        local etime=$(ps -p "$pid" -o etime= | tr -d ' ')
        
        echo -e "\nüìä –†–µ—Å—É—Ä—Å—ã:"
        echo -e "   –ü–∞–º—è—Ç—å: ${memory_mb}MB"
        echo -e "   CPU: ${cpu}%"
        echo -e "   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $etime"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        echo -e "\nüîå –ü–æ—Ä—Ç—ã:"
        if netstat -tlnp | grep -q ":3000 "; then
            print_status "OK" "HTTP –ø–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç"
        else
            print_status "ERROR" "HTTP –ø–æ—Ä—Ç 3000 –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        fi
        
        if netstat -tlnp | grep -q ":3443 "; then
            print_status "OK" "HTTPS –ø–æ—Ä—Ç 3443 –æ—Ç–∫—Ä—ã—Ç"
        else
            print_status "WARNING" "HTTPS –ø–æ—Ä—Ç 3443 –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        fi
        
        # Health check
        echo -e "\nüè• Health Check:"
        if curl -s -f "http://localhost:3000/health" > /dev/null 2>&1; then
            print_status "OK" "Health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç"
        else
            print_status "ERROR" "Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
        
    else
        print_status "ERROR" "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    echo "============================================"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    local lines=${2:-50}
    
    if [[ -f "$LOG_FILE" ]]; then
        print_status "INFO" "–ü–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:"
        echo "============================================"
        tail -n "$lines" "$LOG_FILE"
        echo "============================================"
    else
        print_status "ERROR" "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local action=${1:-status}
    
    case $action in
        "start")
            start_server
            ;;
        "stop")
            stop_server
            ;;
        "restart")
            restart_server
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs "$@"
            ;;
        "health")
            ./health-check.sh
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [start|stop|restart|status|logs|health]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
            echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
            echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
            echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å—Ç—Ä–æ–∫)"
            echo "  health  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 start"
            echo "  $0 logs 100"
            echo "  $0 health"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@" 