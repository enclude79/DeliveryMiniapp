require('dotenv').config();
const express = require('express');
const https = require('https');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const morgan = require('morgan');
// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –°–õ–û–ñ–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ï–†–ù–û–ì–û –≠–ö–†–ê–ù–ê
// const telegramSecurity = require('./middleware/telegram-security');
const { initDatabase } = require('./database');
const adminRoutes = require('./routes/admin');
const productRoutes = require('./routes/products');
const orderRoutes = require('./routes/orders');
const miniappRoutes = require('./routes/miniapp');
const userRoutes = require('./routes/users');
const addressRoutes = require('./routes/addresses');

const app = express();
const port = process.env.PORT || 3000;
const httpsPort = process.env.HTTPS_PORT || 3443;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
const logsDir = path.join(__dirname, 'logs');
if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const accessLogStream = fs.createWriteStream(
    path.join(logsDir, 'access.log'),
    { flags: 'a' }
);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(morgan('combined', { stream: accessLogStream }));
app.use(morgan('dev')); // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
const errorLogger = (err, req, res, next) => {
    const errorLog = {
        timestamp: new Date().toISOString(),
        method: req.method,
        url: req.url,
        headers: req.headers,
        body: req.body,
        error: {
            message: err.message,
            stack: err.stack
        }
    };

    fs.appendFileSync(
        path.join(logsDir, 'error.log'),
        JSON.stringify(errorLog) + '\n'
    );

    console.error('Error:', err);
    next(err);
};

// –í–†–ï–ú–ï–ù–ù–û –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ï–†–ù–û–ì–û –≠–ö–†–ê–ù–ê
app.set('trust proxy', 1);

// –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Telegram
app.use((req, res, next) => {
    res.setHeader('X-Frame-Options', 'ALLOWALL');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    
    const csp = [
        "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:",
        "script-src 'self' 'unsafe-inline' 'unsafe-eval' https:",
        "style-src 'self' 'unsafe-inline' https:",
        "img-src 'self' data: https: blob:",
        "connect-src 'self' https:",
        "frame-src 'self' https://telegram.org https://web.telegram.org",
        "frame-ancestors 'self' https://web.telegram.org https://telegram.org"
    ].join('; ');
    
    res.setHeader('Content-Security-Policy', csp);
    next();
});

// 5. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ middleware
app.use(cors());
app.use(express.json({ limit: '5mb' })); // –£–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(express.static('public'));

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadsDir = path.join(__dirname, 'public', 'uploads');
if (!fs.existsSync(uploadsDir)) {
    fs.mkdirSync(uploadsDir, { recursive: true });
}

// –†–æ—É—Ç –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (HTML)
app.get('/admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'admin.html'));
});

// –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
app.get('/test-admin', (req, res) => {
    res.sendFile(path.join(__dirname, 'test_admin.html'));
});

// API Routes (–∑–∞—â–∏—Ç–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É)
app.use('/api/admin', adminRoutes);
app.use('/products', productRoutes);
app.use('/orders', orderRoutes);
app.use('/miniapp', miniappRoutes);
app.use('/users', userRoutes);
app.use('/addresses', addressRoutes);

// –†–æ—É—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Mini App
app.get('/test', (req, res) => {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π Mini App –∑–∞–ø—Ä–æ—à–µ–Ω:', req.get('User-Agent'));
    res.sendFile(path.join(__dirname, 'public', 'miniapp-test.html'));
});

// –†–æ—É—Ç –¥–ª—è Mini App
app.get('/app', (req, res) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const userAgent = req.headers['user-agent'] || '';
    const isMobile = /iPhone|iPad|iPod|Android/i.test(userAgent);
    const clientIP = req.ip || req.connection.remoteAddress || req.headers['x-forwarded-for'];
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log(`[APP REQUEST] IP: ${clientIP}`);
    console.log(`[APP REQUEST] User-Agent: ${userAgent}`);
    console.log(`[APP REQUEST] Detected as: ${isMobile ? 'Mobile' : 'Desktop'}`);
    console.log(`[APP REQUEST] Headers:`, JSON.stringify(req.headers, null, 2));
    
    if (isMobile) {
        console.log(`[MOBILE APP] üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é`);
        console.log(`[MOBILE APP] üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º miniapp.html`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ Telegram –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        const fromTelegram = req.get('Referer')?.includes('telegram') || 
                           req.get('User-Agent')?.includes('Telegram') ||
                           req.headers['x-telegram-bot-api-secret-token'];
        
        console.log(`[MOBILE APP] ü§ñ –ò—Å—Ç–æ—á–Ω–∏–∫: ${fromTelegram ? 'TELEGRAM BOT' : '–û–ë–´–ß–ù–´–ô –ë–†–ê–£–ó–ï–†'}`);
        
        if (fromTelegram) {
            console.log(`[TELEGRAM BOT] üéØ –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–ø—Ä–æ—Å –æ—Ç Telegram –±–æ—Ç–∞!`);
            console.log(`[TELEGRAM BOT] üéØ –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π —á–µ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞`);
        }
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    res.sendFile(path.join(__dirname, 'public', 'miniapp.html'));
});

// –†–æ—É—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
app.get('/mobile', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'mobile.html'));
});

// –†–æ—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
app.get('/debug', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'mobile-debug.html'));
});

// –†–æ—É—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –±–æ—Ç–∞
app.get('/telegram-debug', (req, res) => {
    console.log(`[TELEGRAM DEBUG] ü§ñ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞`);
    console.log(`[TELEGRAM DEBUG] IP: ${req.ip}`);
    console.log(`[TELEGRAM DEBUG] User-Agent: ${req.get('User-Agent')}`);
    console.log(`[TELEGRAM DEBUG] Referer: ${req.get('Referer') || '–ù–µ—Ç'}`);
    console.log(`[TELEGRAM DEBUG] Headers:`, JSON.stringify(req.headers, null, 2));
    
    res.sendFile(path.join(__dirname, 'public', 'telegram-debug.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.post('/debug/report', (req, res) => {
    console.log(`[DEBUG REPORT] üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏`);
    console.log(`[DEBUG REPORT] User-Agent: ${req.body.userAgent}`);
    console.log(`[DEBUG REPORT] URL: ${req.body.url}`);
    console.log(`[DEBUG REPORT] Referrer: ${req.body.referrer}`);
    console.log(`[DEBUG REPORT] Telegram –¥–æ—Å—Ç—É–ø–µ–Ω: ${req.body.telegramAvailable}`);
    console.log(`[DEBUG REPORT] –í—Ä–µ–º—è: ${new Date(req.body.timestamp).toLocaleString()}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const reportData = {
        timestamp: new Date().toISOString(),
        ip: req.ip,
        ...req.body
    };
    
    fs.appendFileSync(
        path.join(logsDir, 'debug-reports.log'),
        JSON.stringify(reportData) + '\n'
    );
    
    res.json({ success: true, message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞' });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorLogger);
app.use((err, req, res, next) => {
    res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: err.message 
    });
});

async function startServer() {
    try {
        await initDatabase();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        app.listen(port, '0.0.0.0', () => {
            console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${port}`);
            console.log(`üë§ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://0.0.0.0:${port}`);
            console.log(`‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://0.0.0.0:${port}/admin`);
            console.log(`üì± Mini App: http://0.0.0.0:${port}/app`);
            console.log(`üì± –ú–æ–±–∏–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: http://0.0.0.0:${port}/mobile`);
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
        // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ AlphaSSL –¥–ª—è –¥–æ–º–µ–Ω–∞ www.deliveryvlg.xyz
        const certPath = path.join(__dirname, 'ssl', 'certificate.crt'); // –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
        const keyPath = path.join(__dirname, 'ssl', 'private.key');     // –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
        const caPath = path.join(__dirname, 'ssl', 'ca_bundle.crt');    // –ü—É—Ç—å –∫ CA bundle (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
        if (fs.existsSync(certPath) && fs.existsSync(keyPath)) {
            const options = {
                cert: fs.readFileSync(certPath),
                key: fs.readFileSync(keyPath)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º CA bundle, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (fs.existsSync(caPath)) {
                options.ca = fs.readFileSync(caPath);
            }

            https.createServer(options, app).listen(httpsPort, '0.0.0.0', () => {
                console.log(`üîí HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://0.0.0.0:${httpsPort}`);
                console.log(`üîê HTTPS Mini App: https://www.deliveryvlg.xyz:${httpsPort}/app`);
                console.log(`üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è Telegram: https://www.deliveryvlg.xyz:${httpsPort}/app`);
                console.log(`üîç HTTPS –ú–æ–±–∏–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: https://www.deliveryvlg.xyz:${httpsPort}/mobile`);
            });
        } else {
            console.log('‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, HTTPS —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            console.log(`   –û–∂–∏–¥–∞–µ–º—ã–µ –ø—É—Ç–∏ –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º:`);
            console.log(`   - –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${certPath}`);
            console.log(`   - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${keyPath}`);
            console.log(`   - CA Bundle: ${caPath}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startServer();

// ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ =====

// Security management endpoints —É–¥–∞–ª–µ–Ω—ã - –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –Ω–∏–∂–µ

// Health check endpoint
app.get('/health', (req, res) => {
    const uptime = process.uptime();
    const memoryUsage = process.memoryUsage();
    const cpuUsage = process.cpuUsage();
    
    const healthData = {
        status: 'ok',
        timestamp: new Date().toISOString(),
        uptime: `${Math.floor(uptime / 3600)}h ${Math.floor((uptime % 3600) / 60)}m ${Math.floor(uptime % 60)}s`,
        memory: {
            rss: Math.round(memoryUsage.rss / 1024 / 1024) + 'MB',
            heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + 'MB',
            heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + 'MB'
        },
        cpu: {
            user: cpuUsage.user,
            system: cpuUsage.system
        }
    };
    
    console.log(`[HEALTH CHECK] ${JSON.stringify(healthData)}`);
    res.json(healthData);
});

// Security stats endpoint (—Ç–æ–ª—å–∫–æ –¥–ª—è localhost) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.get('/security/stats', (req, res) => {
    const ip = req.ip || req.connection.remoteAddress;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Å localhost
    if (ip !== '127.0.0.1' && ip !== '::1' && ip !== '::ffff:127.0.0.1') {
        return res.status(403).json({ error: 'Access denied' });
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –º–æ–¥—É–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    res.json({ 
        blacklistedIPs: [],
        suspiciousIPs: {},
        timestamp: new Date().toISOString()
    });
});

// Endpoint –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP (—Ç–æ–ª—å–∫–æ –¥–ª—è localhost) - –ò–°–ü–†–ê–í–õ–ï–ù–û
app.post('/security/unblock/:ip', (req, res) => {
    const clientIP = req.ip || req.connection.remoteAddress;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Å localhost
    if (clientIP !== '127.0.0.1' && clientIP !== '::1' && clientIP !== '::ffff:127.0.0.1') {
        return res.status(403).json({ error: 'Access denied' });
    }
    
    const ipToUnblock = req.params.ip;
    console.log(`[SECURITY] IP ${ipToUnblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é`);
    
    res.json({ 
        success: true, 
        message: `IP ${ipToUnblock} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
        timestamp: new Date().toISOString()
    });
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    const memUsage = process.memoryUsage();
    const memUsedMB = Math.round(memUsage.heapUsed / 1024 / 1024);
    const memTotalMB = Math.round(memUsage.heapTotal / 1024 / 1024);
    
    console.log(`[MEMORY MONITOR] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${memUsedMB}MB / ${memTotalMB}MB`);
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
    if (memUsedMB > 800) {
        console.warn(`[MEMORY WARNING] ‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memUsedMB}MB`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        const warningLog = {
            timestamp: new Date().toISOString(),
            type: 'MEMORY_WARNING',
            memoryUsed: memUsedMB,
            memoryTotal: memTotalMB
        };
        
        fs.appendFileSync(
            path.join(logsDir, 'error.log'),
            JSON.stringify(warningLog) + '\n'
        );
    }
}, 30000);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    const errorLog = {
        timestamp: new Date().toISOString(),
        type: 'UNCAUGHT_EXCEPTION',
        error: {
            message: error.message,
            stack: error.stack
        }
    };
    
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    
    fs.appendFileSync(
        path.join(logsDir, 'error.log'),
        JSON.stringify(errorLog) + '\n'
    );
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
    setTimeout(() => {
        process.exit(1);
    }, 1000);
});

process.on('unhandledRejection', (reason, promise) => {
    const errorLog = {
        timestamp: new Date().toISOString(),
        type: 'UNHANDLED_REJECTION',
        reason: reason?.toString(),
        promise: promise?.toString()
    };
    
    console.error('‚ùå –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–†–û–ú–ò–°–ê:', reason);
    
    fs.appendFileSync(
        path.join(logsDir, 'error.log'),
        JSON.stringify(errorLog) + '\n'
    );
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –Ω–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    gracefulShutdown();
});

process.on('SIGINT', () => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT (Ctrl+C), –Ω–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
    gracefulShutdown();
});

function gracefulShutdown() {
    const shutdownLog = {
        timestamp: new Date().toISOString(),
        type: 'GRACEFUL_SHUTDOWN',
        uptime: process.uptime()
    };
    
    console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞—é –ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...');
    fs.appendFileSync(
        path.join(logsDir, 'error.log'),
        JSON.stringify(shutdownLog) + '\n'
    );
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
}

// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const startupLog = {
    timestamp: new Date().toISOString(),
    type: 'STARTUP',
    pid: process.pid,
    nodeVersion: process.version,
    platform: process.platform,
    arch: process.arch
};

fs.appendFileSync(
    path.join(logsDir, 'error.log'),
    JSON.stringify(startupLog) + '\n'
);

console.log(`üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: ${process.pid})`);
console.log(`üìä Health check –¥–æ—Å—Ç—É–ø–µ–Ω: /health`);
console.log(`üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: ${logsDir}`); 