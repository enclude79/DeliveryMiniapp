require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { query } = require('../database');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞
const botLogsDir = path.join(__dirname, '..', 'logs', 'telegram');
if (!fs.existsSync(botLogsDir)) {
    fs.mkdirSync(botLogsDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logBot(type, message, data = {}) {
    const logEntry = {
        timestamp: new Date().toISOString(),
        type,
        message,
        data
    };

    const logFile = path.join(botLogsDir, 'bot.log');
    fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
    console.log(`[Telegram Bot] ${type}:`, message, data);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

logBot('INFO', '–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { token: process.env.TELEGRAM_BOT_TOKEN.slice(0, 5) + '...' });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    logBot('ERROR', '–û—à–∏–±–∫–∞ polling', { error: error.message, stack: error.stack });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ webhook
bot.on('webhook_error', (error) => {
    logBot('ERROR', '–û—à–∏–±–∫–∞ webhook', { error: error.message, stack: error.stack });
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const carts = new Map();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    logBot('INFO', '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start', { chatId });

    try {
        const message = `
üçΩ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã!*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;
        
        const keyboard = {
            reply_markup: {
                keyboard: [
                    ['üçî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é'],
                    ['üõí –ö–æ—Ä–∑–∏–Ω–∞'],
                    ['üì± –ú–æ–∏ –∑–∞–∫–∞–∑—ã', '‚ùì –ü–æ–º–æ—â—å']
                ],
                resize_keyboard: true
            },
            parse_mode: 'Markdown'
        };
        
        await bot.sendMessage(chatId, message, keyboard);
        logBot('INFO', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', { chatId });
    } catch (error) {
        logBot('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', { chatId, error });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
bot.onText(/üçî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é|\/menu/, async (msg) => {
    const chatId = msg.chat.id;
    logBot('INFO', '–ó–∞–ø—Ä–æ—à–µ–Ω–æ –º–µ–Ω—é', { chatId });

    try {
        const categories = await query('SELECT * FROM categories');
        logBot('DEBUG', '–ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', { chatId, categories: categories.map(c => c.name) });

        const keyboard = {
            inline_keyboard: categories.map(cat => ([{
                text: `${getCategoryEmoji(cat.name)} ${cat.name}`,
                callback_data: `category_${cat.id}`
            }]))
        };

        await bot.sendMessage(
            chatId,
            '*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*',
            {
                reply_markup: keyboard,
                parse_mode: 'Markdown'
            }
        );
    } catch (error) {
        logBot('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', { chatId, error });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é');
    }
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryEmoji(categoryName) {
    const emojis = {
        '–ë—É—Ä–≥–µ—Ä—ã': 'üçî',
        '–ü–∏—Ü—Ü–∞': 'üçï',
        '–°—É—à–∏': 'üç±',
        '–ù–∞–ø–∏—Ç–∫–∏': 'ü•§',
        '–î–µ—Å–µ—Ä—Ç—ã': 'üç∞',
        '–°–∞–ª–∞—Ç—ã': 'ü•ó',
        '–ú–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ': 'üç¶',
        '–ü–µ–ª—å–º–µ–Ω–∏': 'ü•ü'
    };
    return emojis[categoryName] || 'üçΩ';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    logBot('INFO', '–ü–æ–ª—É—á–µ–Ω callback_query', { chatId, data });

    try {
        if (data.startsWith('category_')) {
            const categoryId = data.split('_')[1];
            const products = await query(
                'SELECT * FROM products WHERE category_id = ?',
                [categoryId]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π
            for (const product of products) {
                const imageUrl = product.image ? 
                    `https://www.deliveryvlg.xyz${product.image}` : 
                    'https://via.placeholder.com/400x300?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';

                const message = `
*${product.name}*
üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ

${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
`;

                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: `üõí –í –∫–æ—Ä–∑–∏–Ω—É - ${product.price} ‚ÇΩ`,
                                callback_data: `add_to_cart_${product.id}`
                            }
                        ],
                        [
                            {
                                text: 'üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                                callback_data: `product_details_${product.id}`
                            }
                        ]
                    ]
                };

                await bot.sendPhoto(chatId, imageUrl, {
                    caption: message,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        } 
        else if (data.startsWith('add_to_cart_')) {
            const productId = data.split('_')[3];
            if (!carts.has(chatId)) {
                carts.set(chatId, new Map());
            }
            const cart = carts.get(chatId);
            const quantity = cart.get(productId) || 0;
            cart.set(productId, quantity + 1);

            const [product] = await query(
                'SELECT * FROM products WHERE id = ?',
                [productId]
            );

            await bot.answerCallbackQuery(callbackQuery.id, {
                text: `‚úÖ ${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`
            });
        }
        else if (data.startsWith('product_details_')) {
            const productId = data.split('_')[2];
            const [product] = await query(
                'SELECT p.*, c.name as category_name FROM products p LEFT JOIN categories c ON p.category_id = c.id WHERE p.id = ?',
                [productId]
            );

            const imageUrl = product.image ? 
                `https://www.deliveryvlg.xyz${product.image}` : 
                'https://via.placeholder.com/400x300?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';

            const message = `
*${product.name}*
üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category_name}
üí∞ –¶–µ–Ω–∞: ${product.price} ‚ÇΩ

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
${product.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
`;

            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: `üõí –í –∫–æ—Ä–∑–∏–Ω—É - ${product.price} ‚ÇΩ`,
                            callback_data: `add_to_cart_${product.id}`
                        }
                    ],
                    [
                        {
                            text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é',
                            callback_data: `category_${product.category_id}`
                        }
                    ]
                ]
            };

            await bot.sendPhoto(chatId, imageUrl, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    } catch (error) {
        logBot('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query', { chatId, data, error });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
bot.onText(/üõí –ö–æ—Ä–∑–∏–Ω–∞|\/cart/, async (msg) => {
    const chatId = msg.chat.id;
    const cart = carts.get(chatId);

    if (!cart || cart.size === 0) {
        await bot.sendMessage(chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
    }

    try {
        let total = 0;
        let message = '*üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';

        for (const [productId, quantity] of cart.entries()) {
            const [product] = await query(
                'SELECT * FROM products WHERE id = ?',
                [productId]
            );
            const subtotal = product.price * quantity;
            total += subtotal;
            message += `‚Ä¢ ${product.name}\n  ${quantity} —à—Ç √ó ${product.price} ‚ÇΩ = ${subtotal} ‚ÇΩ\n\n`;
        }

        message += `\nüí∞ *–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ*`;

        const keyboard = {
            inline_keyboard: [
                [
                    { 
                        text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
                        callback_data: 'checkout_start'
                    }
                ],
                [
                    {
                        text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
                        callback_data: 'clear_cart'
                    }
                ]
            ]
        };

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        logBot('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã', { chatId, error });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
});

// –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'checkout_start') {
        userStates.set(chatId, { state: 'waiting_name' });
        await bot.sendMessage(chatId, 
            '*üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', 
            { parse_mode: 'Markdown' }
        );
    } else if (data === 'clear_cart') {
        carts.delete(chatId);
        await bot.sendMessage(chatId, 'üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const state = userStates.get(chatId);

    if (!state) return;

    try {
        switch (state.state) {
            case 'waiting_name':
                state.name = text;
                state.state = 'waiting_phone';
                await bot.sendMessage(chatId, 
                    'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                    { parse_mode: 'Markdown' }
                );
                break;

            case 'waiting_phone':
                state.phone = text;
                state.state = 'waiting_address';
                await bot.sendMessage(chatId,
                    'üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:',
                    { parse_mode: 'Markdown' }
                );
                break;

            case 'waiting_address':
                state.address = text;
                const cart = carts.get(chatId);
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                const orderResult = await query(
                    'INSERT INTO orders (user_id, status, created_at, customer_name, phone, address) VALUES (?, ?, NOW(), ?, ?, ?)',
                    [chatId, 'new', state.name, state.phone, state.address]
                );
                const orderId = orderResult.lastID;

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
                let total = 0;
                for (const [productId, quantity] of cart.entries()) {
                    const [product] = await query(
                        'SELECT * FROM products WHERE id = ?',
                        [productId]
                    );
                    await query(
                        'INSERT INTO order_items (order_id, product_id, quantity, price) VALUES (?, ?, ?, ?)',
                        [orderId, productId, quantity, product.price]
                    );
                    total += product.price * quantity;
                }

                // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                carts.delete(chatId);
                userStates.delete(chatId);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                const confirmMessage = `
*‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*

üìù *–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*
‚Ä¢ –ò–º—è: ${state.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${state.phone}
‚Ä¢ –ê–¥—Ä–µ—Å: ${state.address}
‚Ä¢ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${total} ‚ÇΩ

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.
–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! üôè
`;
                await bot.sendMessage(chatId, confirmMessage, { parse_mode: 'Markdown' });
                break;
        }
    } catch (error) {
        logBot('ERROR', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', { chatId, error });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        userStates.delete(chatId);
    }
});

// –ü–æ–º–æ—â—å
bot.onText(/‚ùì –ü–æ–º–æ—â—å|\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
*üçΩ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /menu - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
‚Ä¢ /cart - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*
1. –ù–∞–∂–º–∏—Ç–µ "üçî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥
3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
5. –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
6. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞

*–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
‚úâÔ∏è Email: support@delivery.ru
`;
    
    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
});

logBot('INFO', '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

module.exports = bot; 