const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bcrypt = require('bcrypt');
const fs = require('fs');

let db;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function initDB() {
    const dbPath = path.join(__dirname, 'delivery.db');
    
    try {
        db = new sqlite3.Database(dbPath, (err) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                const errorLog = {
                    timestamp: new Date().toISOString(),
                    type: 'DATABASE_CONNECTION_ERROR',
                    error: err.message,
                    dbPath: dbPath
                };
                
                const logsDir = path.join(__dirname, 'logs');
                if (!fs.existsSync(logsDir)) {
                    fs.mkdirSync(logsDir);
                }
                
                fs.appendFileSync(
                    path.join(logsDir, 'error.log'),
                    JSON.stringify(errorLog) + '\n'
                );
                
                throw err;
            }
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.on('error', (err) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
            
            const errorLog = {
                timestamp: new Date().toISOString(),
                type: 'DATABASE_ERROR',
                error: err.message
            };
            
            const logsDir = path.join(__dirname, 'logs');
            fs.appendFileSync(
                path.join(logsDir, 'error.log'),
                JSON.stringify(errorLog) + '\n'
            );
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
        process.exit(1);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
initDB();

function query(sql, params = []) {
    return new Promise((resolve, reject) => {
        const sqlUpper = sql.trim().toUpperCase();
        if (sqlUpper.startsWith('INSERT') || sqlUpper.startsWith('UPDATE') || sqlUpper.startsWith('DELETE')) {
            db.run(sql, params, function(err) {
                if (err) reject(err);
                else resolve({ lastID: this.lastID, changes: this.changes });
            });
        } else {
            db.all(sql, params, (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            });
        }
    });
}

// –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ app_settings –≤ order_statuses
async function migrateOrderStatuses() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ order_statuses
        const existingStatuses = await query('SELECT COUNT(*) as count FROM order_statuses');
        if (existingStatuses[0].count > 0) {
            console.log('[DB] Order statuses already migrated');
            return;
        }

        console.log('[DB] Migrating order statuses...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ app_settings
        const [statusesSetting] = await query(
            'SELECT setting_value FROM app_settings WHERE setting_key = ?',
            ['order_statuses']
        );

        let statuses = ['pending', '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ', '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è', '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–æ—Ç–º–µ–Ω–µ–Ω'];
        if (statusesSetting) {
            try {
                statuses = JSON.parse(statusesSetting.setting_value);
            } catch (e) {
                console.error('[DB] Error parsing order statuses, using defaults:', e);
            }
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        const statusConfig = {
            'pending': { name: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è', color: '#F59E0B', description: '–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' },
            '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ': { name: 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', color: '#3B82F6', description: '–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' },
            '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è': { name: 'üì¶ –°–æ–±–∏—Ä–∞–µ—Ç—Å—è', color: '#8B5CF6', description: '–ó–∞–∫–∞–∑ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ' },
            '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ': { name: 'üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ', color: '#F59E0B', description: '–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É' },
            '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': { name: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', color: '#10B981', description: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω', is_final: true },
            '–æ—Ç–º–µ–Ω–µ–Ω': { name: '‚ùå –û—Ç–º–µ–Ω–µ–Ω', color: '#EF4444', description: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', is_final: true }
        };

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
        for (let i = 0; i < statuses.length; i++) {
            const statusKey = statuses[i];
            const config = statusConfig[statusKey] || { 
                name: statusKey, 
                color: '#6B7280', 
                description: `–°—Ç–∞—Ç—É—Å: ${statusKey}` 
            };

            await query(`
                INSERT INTO order_statuses 
                (key, name, description, order_priority, color, is_active, is_final) 
                VALUES (?, ?, ?, ?, ?, ?, ?)
            `, [
                statusKey,
                config.name,
                config.description,
                i + 1, // –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                config.color,
                1, // –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∞–∫—Ç–∏–≤–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                config.is_final ? 1 : 0
            ]);
        }

        console.log(`[DB] Migrated ${statuses.length} order statuses successfully`);
    } catch (error) {
        console.error('[DB] Error migrating order statuses:', error);
        throw error;
    }
}

async function initDatabase() {
    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await query(`
            CREATE TABLE IF NOT EXISTS admins (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await query(`
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è emoji –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try {
            await query('ALTER TABLE categories ADD COLUMN emoji TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è order_priority –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try {
            await query('ALTER TABLE categories ADD COLUMN order_priority INTEGER DEFAULT 0');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await query(`
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                price REAL NOT NULL,
                category_id INTEGER,
                image TEXT,
                active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await query(`
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id TEXT UNIQUE NOT NULL,
                first_name TEXT,
                last_name TEXT,
                username TEXT,
                phone TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
            await query('ALTER TABLE users ADD COLUMN first_name TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE users ADD COLUMN last_name TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE users ADD COLUMN username TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE users ADD COLUMN phone TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE users ADD COLUMN updated_at DATETIME DEFAULT CURRENT_TIMESTAMP');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É products –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
            await query('ALTER TABLE products ADD COLUMN weight REAL');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE products ADD COLUMN available INTEGER DEFAULT 1');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE products ADD COLUMN discontinued INTEGER DEFAULT 0');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE products ADD COLUMN network_price REAL');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE products ADD COLUMN order_priority INTEGER DEFAULT 0');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è operator_message –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        try {
            await query('ALTER TABLE orders ADD COLUMN operator_message TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É user_addresses –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        try {
            await query('ALTER TABLE user_addresses ADD COLUMN admin_latitude REAL');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE user_addresses ADD COLUMN admin_longitude REAL');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }
        try {
            await query('ALTER TABLE user_addresses ADD COLUMN admin_coordinate_comment TEXT');
        } catch (e) { /* —Å—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç */ }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await query(`
            CREATE TABLE IF NOT EXISTS user_addresses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                latitude REAL,
                longitude REAL,
                full_address TEXT,
                entrance TEXT,
                floor TEXT,
                apartment TEXT,
                intercom TEXT,
                comment TEXT,
                is_default BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
        await query(`
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                items TEXT,
                total REAL NOT NULL,
                address TEXT,
                status TEXT DEFAULT 'pending',
                comment TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
        await query(`
            CREATE TABLE IF NOT EXISTS order_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                quantity INTEGER NOT NULL,
                price REAL NOT NULL,
                FOREIGN KEY (order_id) REFERENCES orders (id),
                FOREIGN KEY (product_id) REFERENCES products (id)
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await query(`
            CREATE TABLE IF NOT EXISTS app_settings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                setting_key TEXT UNIQUE NOT NULL,
                setting_value TEXT NOT NULL,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        await query(`
            CREATE TABLE IF NOT EXISTS order_statuses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                key TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                order_priority INTEGER NOT NULL,
                color TEXT DEFAULT '#6B7280',
                is_active BOOLEAN DEFAULT 1,
                is_final BOOLEAN DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        `);

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        await query(`
            CREATE INDEX IF NOT EXISTS idx_order_statuses_priority 
            ON order_statuses(order_priority)
        `);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const settingsDefaults = [
            {
                key: 'critical_order_status',
                value: '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è',
                description: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'
            },
            {
                key: 'order_statuses',
                value: JSON.stringify(['pending', '–≤_–æ–±—Ä–∞–±–æ—Ç–∫–µ', '—Å–æ–±–∏—Ä–∞–µ—Ç—Å—è', '–≤_–¥–æ—Å—Ç–∞–≤–∫–µ', '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω', '–æ—Ç–º–µ–Ω–µ–Ω']),
                description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤'
            }
        ];

        for (const setting of settingsDefaults) {
            const existing = await query('SELECT id FROM app_settings WHERE setting_key = ?', [setting.key]);
            if (existing.length === 0) {
                await query(
                    'INSERT INTO app_settings (setting_key, setting_value, description) VALUES (?, ?, ?)',
                    [setting.key, setting.value, setting.description]
                );
            }
        }

        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        await migrateOrderStatuses();

        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const adminExists = await query('SELECT id FROM admins WHERE username = ?', [process.env.ADMIN_USERNAME]);
        if (adminExists.length === 0) {
            const passwordHash = await bcrypt.hash(process.env.ADMIN_PASSWORD, 10);
            await query('INSERT INTO admins (username, password_hash) VALUES (?, ?)', 
                [process.env.ADMIN_USERNAME, passwordHash]);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

module.exports = {
    query,
    initDatabase
}; 