#!/bin/bash

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π health check –¥–ª—è Delivery App
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
APP_DIR="/home/enclude/delivery-app"
LOG_FILE="/var/log/delivery-app-health.log"
HEALTH_URL="http://localhost:3000/health"
ADMIN_URL="http://localhost:3000/admin"
APP_URL="http://localhost:3000/app"
HTTPS_URL="https://localhost:3443/health"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_status() {
    local status=$1
    local message=$2
    
    case $status in
        "OK")
            echo -e "${GREEN}‚úÖ $message${NC}"
            ;;
        "WARNING")
            echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
            ;;
        "ERROR")
            echo -e "${RED}‚ùå $message${NC}"
            ;;
        *)
            echo -e "$message"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ Node.js
check_process() {
    local pid=$(pgrep -f "node server.js")
    if [[ -n "$pid" ]]; then
        print_status "OK" "–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        return 0
    else
        print_status "ERROR" "–ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    local errors=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3000
    if netstat -tlnp | grep -q ":3000 "; then
        print_status "OK" "–ü–æ—Ä—Ç 3000 (HTTP) –æ—Ç–∫—Ä—ã—Ç"
    else
        print_status "ERROR" "–ü–æ—Ä—Ç 3000 (HTTP) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
        errors=$((errors + 1))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 3443
    if netstat -tlnp | grep -q ":3443 "; then
        print_status "OK" "–ü–æ—Ä—Ç 3443 (HTTPS) –æ—Ç–∫—Ä—ã—Ç"
    else
        print_status "WARNING" "–ü–æ—Ä—Ç 3443 (HTTPS) –Ω–µ –æ—Ç–∫—Ä—ã—Ç"
    fi
    
    return $errors
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints
check_endpoints() {
    local errors=0
    
    # Health endpoint
    if curl -s -f "$HEALTH_URL" > /dev/null 2>&1; then
        print_status "OK" "Health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        print_status "ERROR" "Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        errors=$((errors + 1))
    fi
    
    # Admin panel
    if curl -s -I "$ADMIN_URL" | grep -q "200 OK"; then
        print_status "OK" "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        print_status "ERROR" "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        errors=$((errors + 1))
    fi
    
    # Mini App
    if curl -s -I "$APP_URL" | grep -q "200 OK"; then
        print_status "OK" "Mini App –¥–æ—Å—Ç—É–ø–Ω–æ"
    else
        print_status "ERROR" "Mini App –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    local db_file="$APP_DIR/delivery.db"
    
    if [[ -f "$db_file" ]]; then
        if [[ -r "$db_file" && -w "$db_file" ]]; then
            print_status "OK" "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–∑—ã
            local size=$(stat -c%s "$db_file")
            print_status "OK" "–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $((size / 1024)) KB"
            return 0
        else
            print_status "ERROR" "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏"
            return 1
        fi
    else
        print_status "ERROR" "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
check_logs() {
    local errors=0
    local logs_dir="$APP_DIR/logs"
    
    if [[ -d "$logs_dir" ]]; then
        print_status "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
        for log in "app.log" "error.log" "access.log"; do
            if [[ -f "$logs_dir/$log" ]]; then
                local size=$(stat -c%s "$logs_dir/$log")
                print_status "OK" "$log: $((size / 1024)) KB"
            else
                print_status "WARNING" "$log –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
        done
    else
        print_status "ERROR" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
check_resources() {
    local pid=$(pgrep -f "node server.js")
    
    if [[ -n "$pid" ]]; then
        # –ü–∞–º—è—Ç—å
        local memory=$(ps -p "$pid" -o rss= | tr -d ' ')
        local memory_mb=$((memory / 1024))
        
        if [[ $memory_mb -lt 500 ]]; then
            print_status "OK" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_mb}MB"
        elif [[ $memory_mb -lt 1000 ]]; then
            print_status "WARNING" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_mb}MB (–≤—ã—Å–æ–∫–æ–µ)"
        else
            print_status "ERROR" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${memory_mb}MB (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ)"
        fi
        
        # CPU
        local cpu=$(ps -p "$pid" -o %cpu= | tr -d ' ')
        print_status "OK" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: ${cpu}%"
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        local etime=$(ps -p "$pid" -o etime= | tr -d ' ')
        print_status "OK" "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $etime"
    else
        print_status "ERROR" "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
check_ssl() {
    local ssl_dir="$APP_DIR/ssl"
    
    if [[ -d "$ssl_dir" ]]; then
        print_status "OK" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        for cert_file in "certificate.crt" "private.key" "ca_bundle.crt"; do
            if [[ -f "$ssl_dir/$cert_file" ]]; then
                print_status "OK" "SSL —Ñ–∞–π–ª $cert_file –Ω–∞–π–¥–µ–Ω"
            else
                print_status "WARNING" "SSL —Ñ–∞–π–ª $cert_file –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
        done
    else
        print_status "WARNING" "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
main() {
    echo "============================================"
    echo "  HEALTH CHECK - DELIVERY APP"
    echo "  $(date '+%Y-%m-%d %H:%M:%S')"
    echo "============================================"
    
    local total_errors=0
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞..."
    check_process
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    check_ports
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints..."
    check_endpoints
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    check_database
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
    check_logs
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    check_resources
    total_errors=$((total_errors + $?))
    
    echo -e "\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL..."
    check_ssl
    
    echo -e "\n============================================"
    if [[ $total_errors -eq 0 ]]; then
        print_status "OK" "–í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û"
        log_message "INFO: Health check —É—Å–ø–µ—à–µ–Ω - –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
    else
        print_status "ERROR" "–û–ë–ù–ê–†–£–ñ–ï–ù–û $total_errors –û–®–ò–ë–û–ö"
        log_message "ERROR: Health check –æ–±–Ω–∞—Ä—É–∂–∏–ª $total_errors –æ—à–∏–±–æ–∫"
    fi
    echo "============================================"
    
    return $total_errors
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
main "$@" 