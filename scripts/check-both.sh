#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ (prod + dev)
# –ê–≤—Ç–æ—Ä: DevOps —Å–∏—Å—Ç–µ–º–∞ DeliveryVLG
# –î–∞—Ç–∞: 2025-01-15

echo "üîç –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–†–í–ï–†–û–í"
echo "================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "üìä –°–ò–°–¢–ï–ú–ù–´–ï –°–ï–†–í–ò–°–´:"

# –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å
if systemctl is-active --quiet delivery-app; then
    echo "‚úÖ delivery-app (PROD): active (running)"
else
    echo "‚ùå delivery-app (PROD): –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

# Dev —Å–µ—Ä–≤–∏—Å
if systemctl is-active --quiet delivery-app-dev; then
    echo "‚úÖ delivery-app-dev (DEV): active (running)"
else
    echo "‚ùå delivery-app-dev (DEV): –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üåê HTTP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø–æ—Ä—Ç–æ–≤
for port in 3000 3001; do
    env_name="PROD"
    if [ $port -eq 3001 ]; then
        env_name="DEV"
    fi
    
    if timeout 5 curl -s http://127.0.0.1:$port > /dev/null 2>&1; then
        response_time=$(curl -o /dev/null -s -w "%{time_total}" http://127.0.0.1:$port)
        ms=$(echo "$response_time * 1000" | bc | cut -d. -f1)
        echo "‚úÖ $env_name ($port): 200 OK (${ms}ms)"
    else
        echo "‚ùå $env_name ($port): –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
done

echo ""
echo "üîí HTTPS –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –ø–æ—Ä—Ç–æ–≤
for port in 3443 3444; do
    env_name="PROD"
    if [ $port -eq 3444 ]; then
        env_name="DEV"
    fi
    
    if timeout 5 curl -k -s https://127.0.0.1:$port > /dev/null 2>&1; then
        response_time=$(curl -k -o /dev/null -s -w "%{time_total}" https://127.0.0.1:$port)
        ms=$(echo "$response_time * 1000" | bc | cut -d. -f1)
        echo "‚úÖ $env_name ($port): 200 OK (${ms}ms)"
    else
        echo "‚ùå $env_name ($port): –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
done

echo ""
echo "üíæ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
for service in "delivery-app" "delivery-app-dev"; do
    env_name="PROD"
    if [[ $service == *"dev" ]]; then
        env_name="DEV"
    fi
    
    pid=$(systemctl show --property MainPID --value $service)
    if [ "$pid" != "0" ] && [ -n "$pid" ]; then
        mem_info=$(ps -p $pid -o pid,rss,pmem --no-headers 2>/dev/null)
        if [ $? -eq 0 ]; then
            mem_mb=$(echo $mem_info | awk '{printf "%.1f", $2/1024}')
            mem_percent=$(echo $mem_info | awk '{printf "%.1f", $3}')
            echo "üìà $env_name: ${mem_mb}MB (${mem_percent}%)"
        fi
    else
        echo "‚ùå $env_name: –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

echo ""
echo "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–¶–ï–°–°–û–í:"

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
for service in "delivery-app" "delivery-app-dev"; do
    env_name="PROD"
    if [[ $service == *"dev" ]]; then
        env_name="DEV"
    fi
    
    pid=$(systemctl show --property MainPID --value $service)
    if [ "$pid" != "0" ] && [ -n "$pid" ]; then
        # CPU –∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        cpu_info=$(ps -p $pid -o pid,pcpu,etime --no-headers 2>/dev/null)
        if [ $? -eq 0 ]; then
            cpu_percent=$(echo $cpu_info | awk '{print $2}')
            uptime=$(echo $cpu_info | awk '{print $3}')
            echo "$env_name PID: $pid | CPU: ${cpu_percent}% | Uptime: $uptime"
        fi
    fi
done

echo ""
echo "üóÉÔ∏è –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó –î–ê–ù–ù–´–•:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ë–î
for db in "delivery.db" "delivery-dev.db"; do
    env_name="PROD"
    if [[ $db == *"dev"* ]]; then
        env_name="DEV"
    fi
    
    if [ -f "$db" ]; then
        size=$(du -h "$db" | cut -f1)
        modified=$(stat -c %y "$db" | cut -d' ' -f1)
        echo "‚úÖ $env_name DB: $db (${size}, modified: $modified)"
    else
        echo "‚ùå $env_name DB: —Ñ–∞–π–ª $db –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# Git —Å—Ç–∞—Ç—É—Å
if [ -d ".git" ]; then
    echo ""
    echo "üåø GIT –°–¢–ê–¢–£–°:"
    current_branch=$(git symbolic-ref --short HEAD)
    echo "üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: $current_branch"
    
    if [ -n "$(git status --porcelain)" ]; then
        echo "‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    else
        echo "‚úÖ Working directory clean"
    fi
fi

echo ""
echo "üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
errors=0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
if ! systemctl is-active --quiet delivery-app; then
    echo "‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    errors=$((errors + 1))
fi

if ! systemctl is-active --quiet delivery-app-dev; then
    echo "‚ùå Dev —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"  
    errors=$((errors + 1))
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø–æ—Ä—Ç–æ–≤
if ! timeout 3 curl -s http://127.0.0.1:3000 > /dev/null 2>&1; then
    echo "‚ùå –ü—Ä–æ–¥–∞–∫—à–Ω HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    errors=$((errors + 1))
fi

if ! timeout 3 curl -s http://127.0.0.1:3001 > /dev/null 2>&1; then
    echo "‚ùå Dev HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    errors=$((errors + 1))
fi

if [ $errors -eq 0 ]; then
    echo "‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ù–û–†–ú–ê–õ–¨–ù–û"
    exit 0
else
    echo "‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´: $errors"
    echo "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo journalctl -fu delivery-app"
    exit 1
fi 